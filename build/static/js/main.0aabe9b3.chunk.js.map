{"version":3,"sources":["components/Persons.js","components/AddPerson.js","components/Search.js","components/Message.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","deleteHandler","name","number","onClick","Persons","persons","map","key","id","AddPerson","props","onSubmit","submitHandler","value","nameValue","onChange","nameHandler","numberValue","numberHandler","type","Search","searchQuery","searchQueryHandler","Message","message","text","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearchQuery","setMessage","shownPersons","filter","toLowerCase","includes","useEffect","personService","updateNumber","find","p","window","confirm","newPerson","updatedPerson","setTimeout","resetMessage","catch","error","handleServerError","event","target","preventDefault","existingPerson","returnedPerson","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.0aabe9b3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = ({ persons, deleteHandler }) => {\n  return (\n    <ul>\n      {persons.map(person => \n        <Person \n          key={person.id}\n          person={person}\n          deleteHandler={() => deleteHandler(person.id)}\n        />\n      )}\n    </ul>\n  )\n}\n\nconst Person = ({ person, deleteHandler }) => {\n    return (\n      <li>\n        {person.name} {person.number} \n        <button onClick={deleteHandler}>delete</button>\n      </li>)\n}\n\nexport default Persons\n","import React from 'react'\n\nconst AddPerson = (props) => {\n    return (\n        <form onSubmit={props.submitHandler}>\n          <div>\n            name: <input value={props.nameValue} onChange={props.nameHandler}/>\n          </div>\n          <div>\n            number: <input value={props.numberValue} onChange={props.numberHandler}/>\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n    )\n}\n\nexport default AddPerson\n","import React from 'react'\n\nconst Search = ({searchQuery, searchQueryHandler}) => {\n    return (\n        <div>Filter by name: <input value={searchQuery} onChange={searchQueryHandler}/></div>\n    )\n}\n\nexport default Search\n","import React from 'react'\nimport './Message.css'\n\nconst Message = ({ message }) => {\n  if (message.text === null) {\n    return null\n  }\n\n  return (\n    <div className={`message ${message.type}`}>\n      {message.text}\n    </div>\n  )\n}\n\nexport default Message\n","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => axios.get(baseUrl).then(response => response.data)\n\nconst create = newObject => {\n  return axios\n    .post(baseUrl, newObject)\n    .then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  return axios\n    .put(`${baseUrl}/${id}`, newObject)\n    .then(response => response.data)\n}\n\nconst delete_ = id => {\n  return axios\n    .delete(`${baseUrl}/${id}`)\n    .then(response => response.data)\n}\n\nexport default { getAll, create, update, delete_ }\n","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport AddPerson from './components/AddPerson'\nimport Search from './components/Search'\nimport Message from './components/Message'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchQuery, setSearchQuery ] = useState('')\n  const [ message, setMessage ] = useState({text: null, type: ''})\n  \n  const shownPersons = persons.filter(\n    person => person.name.toLowerCase().includes(searchQuery.toLowerCase()))\n\n  // Handle input fields\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchQueryChange = (event) => {\n    setSearchQuery(event.target.value)\n  }\n\n  // GET persons from JSON database\n  useEffect(() => {\n    personService\n    .getAll()\n    .then(persons => setPersons(persons))\n  }, [])\n\n  // CREATE person\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (!(newName && newNumber)) {\n      setMessage({text:`Name and number required`, type: 'error'})\n      setTimeout(() => resetMessage(), 3000)\n      return\n    }\n    // Attempt to update number if the name is already in the phonebook\n    const existingPerson = persons.find(p => p.name === newName)\n    if (existingPerson) {\n      updateNumber(existingPerson.id, newNumber)\n      // Intentionally return before \"wiping\" the input fields.\n      // This feels like the most natural beahviour after clicking cancel.\n      return\n    }\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    }\n    // The returned person object also contains the id created on the server\n    personService\n      .create(newPerson)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setMessage({text:`Added ${returnedPerson.name}`, type: ''})\n        setTimeout(() => resetMessage(), 3000)\n      })\n      .catch(error => handleServerError(error))\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // UPDATE person\n  const updateNumber = (id, newNumber) => {\n    const person = persons.find(p => p.id === id)\n    if (!window.confirm(\n      `${person.name} is already added to the phonebook,` +\n      `replace the old number with a new one?`)) {\n      return\n    }\n\n    const newPerson = {...person, number: newNumber}\n    personService\n      .update(id, newPerson)\n      .then(updatedPerson => {\n        setPersons(persons.map(p => p.id !== id ? p : updatedPerson))\n        setMessage({text: `Updated number of ${updatedPerson.name} to '${updatedPerson.number}'`, type: ''})\n        setTimeout(() => resetMessage(), 3000)\n      })\n      .catch(error => handleServerError(error, person))\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // DELETE person\n  const deletePerson = id => {\n    const person = persons.find(p => p.id === id)\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .delete_(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id))\n          setMessage({text: `Deleted ${person.name}`, type: ''})\n          setTimeout(() => resetMessage(), 2000) \n        })\n        .catch(error => {\n          handleServerError(error, person)\n          setPersons(persons.filter(p => p.id !== person.id))\n        })\n    }  \n  }\n\n  // Handles server errors\n  const handleServerError = (error, person) => {\n    setMessage({\n      text: error.response.data.error,\n      type: 'error'\n    })\n    setTimeout(() => resetMessage(), 4000)\n  }\n\n  // Convenience function to reset message text and class to empty\n  const resetMessage = () => setMessage({text: null, type: ''})\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n        <Message\n          message={message}\n        />\n      <div>\n        <h2>Search</h2>\n        <Search \n          searchQuery={searchQuery} \n          searchQueryHandler={handleSearchQueryChange} \n        />\n      </div>\n      <div>\n        <h2>Add Contact</h2>\n        <AddPerson\n          nameValue={newName}\n          numberValue={newNumber}\n          nameHandler={handleNameChange}\n          numberHandler={handleNumberChange}\n          submitHandler={addPerson}\n        />\n      </div>\n      <div>\n        <h2>Numbers</h2>\n        <Persons\n          persons={shownPersons}\n          deleteHandler={deletePerson}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}